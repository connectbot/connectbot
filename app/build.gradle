buildscript {
    dependencies {
        classpath 'com.github.gfx.ribbonizer:ribbonizer-plugin:2.1.0'
        if (rootProject.hasProperty('jacocoVersion')) {
            classpath "org.jacoco:org.jacoco.core:${rootProject.jacocoVersion}"
        }
    }
}

plugins {
    id 'com.android.application' version '4.1.2'
    id 'com.github.ben-manes.versions' version '0.38.0'
    id 'info.vividcode.android.sdk-manager' version '0.9.0'
    id 'net.ltgt.errorprone' version '1.3.0'
    id 'com.gladed.androidgitversion' version '0.4.14'
    id 'com.github.kt3k.coveralls' version '2.10.2'
    id 'com.github.johnrengelman.processes' version '0.5.0'
    id 'com.hiya.jacoco-android' version '0.2'
}

ext {
    supportLibraryVersion = '1.1.0'
    testRunnerVersion = '1.3.0'
    espressoVersion = '3.3.0'
}

apply plugin: 'com.github.gfx.ribbonizer'
apply plugin: 'com.diffplug.spotless'
apply from: '../config/quality.gradle'

repositories {
    google()
    mavenCentral()
    // org.jetbrains.trove4j:trove4j:20160824.
    maven { url 'https://plugins.gradle.org/m2/' }
}

def isCi = "true" == System.getenv("CI")
def preDexEnabled = "true" == System.getProperty("pre-dex", "true")

coveralls.jacocoReportPath = 'build/reports/coverage/google/debug/report.xml'

androidGitVersion {
    prefix = "v"
    codeFormat = 'MMNNPPBBB'
}

android {
    compileSdkVersion 29

    dexOptions {
        // Skip pre-dexing when running on a CI or when disabled via -Dpre-dex=false
        preDexLibraries = preDexEnabled && !isCi
    }

    defaultConfig {
        applicationId "org.connectbot"
        versionName androidGitVersion.name()
        versionCode androidGitVersion.code()

        minSdkVersion 14
        buildToolsVersion "29.0.3"
        ndkVersion "21.3.6528147"

        vectorDrawables.useSupportLibrary = true

        ndk {
            abiFilters "x86", "x86_64", "armeabi-v7a", "arm64-v8a"
        }

        testApplicationId "org.connectbot.tests"
        testInstrumentationRunner "org.connectbot.ConnectbotJUnitRunner"

        // The following argument makes the Android Test Orchestrator run its
        // "pm clear" command after each test invocation. This command ensures
        // that the app's state is completely cleared between tests.
        testInstrumentationRunnerArguments clearPackageData: 'true'
    }

    signingConfigs {
        if (project.hasProperty('keystorePassword')) {
            release {
                storeFile file(property('keystoreFile'))
                storePassword property('keystorePassword')
                keyAlias property('keystoreAlias')
                keyPassword property('keystorePassword')
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    buildTypes {
        release {
            shrinkResources true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard.cfg'

            if (project.hasProperty('keystorePassword')) {
                //noinspection GroovyAssignabilityCheck
                signingConfig signingConfigs.release
            }

            return true // this silences Android Studio's groovy inspector
        }

        debug {
            applicationIdSuffix ".debug"
            testCoverageEnabled true
        }
    }

    flavorDimensions "license"

    productFlavors {
        // This product flavor uses the Conscrypt library which is open
        // source and licensed under Apache 2.
        oss {
            dimension "license"
            versionNameSuffix "-oss"
            ndk {
                abiFilters "armeabi-v7a", "arm64-v8a", "x86", "x86_64"
            }
        }

        // This product flavor uses the Google Play Services library for
        // ProviderInstaller. It uses Conscrypt under-the-hood, but the
        // Google Play Services SDK itself is not open source.
        google {
            dimension "license"
            versionNameSuffix ""
        }
    }

    testOptions {
        // temporarily disable the orchestrator as this breaks coverage: https://issuetracker.google.com/issues/72758547
        //execution 'ANDROID_TEST_ORCHESTRATOR'
        animationsDisabled true

        unitTests { includeAndroidResources = true }
    }

    lintOptions {
        abortOnError false
        lintConfig file('lint.xml')
    }

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'LICENSE.txt'
        exclude '**/*.gwt.xml'
    }

    externalNativeBuild { cmake { path 'CMakeLists.txt' } }

    jacoco {
        if (rootProject.hasProperty('jacocoVersion')) {
            version "${rootProject.jacocoVersion}"
        }
    }
}

spotless {
    java {
        target '**/*.java'
        removeUnusedImports()
    }
}

import net.ltgt.gradle.errorprone.CheckSeverity

tasks.withType(JavaCompile) {
    options.errorprone {
        check("ClassCanBeStatic", CheckSeverity.OFF)
        check("ClassNewInstance", CheckSeverity.OFF)
        check("DefaultCharset", CheckSeverity.OFF)
        check("SynchronizeOnNonFinalField", CheckSeverity.OFF)
        excludedPaths = '.*/app/src/main/java/de/mud/.*|' +
                '.*/app/src/main/java/org/apache/.*|' +
                '.*/app/src/main/java/org/keyczar/.*'
    }
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

/*
 * This works around a deficiency in ddmlib's 
 * com/android/ddmlib/AndroidDebugBridge.java where it doesn't support anything
 * other than 127.0.0.1 for the host of ADB. This allows us to run tests
 * in a Docker container but forward to a real device.
 */
import com.github.jengelman.gradle.plugins.processes.tasks.Fork
task startAdbForwarding(type: Fork) {
    onlyIf { System.getenv("ANDROID_ADB_SERVER_ADDRESS") != null }

    def androidAdbServerAddress = System.getenv("ANDROID_ADB_SERVER_ADDRESS")
    commandLine 'socat', 'TCP-LISTEN:5037,reuseaddr,fork', "TCP:${androidAdbServerAddress}:5037"
}

task stopAdbForwarding {
    onlyIf { System.getenv("ANDROID_ADB_SERVER_ADDRESS") != null }
    doLast {
        startAdbForwarding.processHandle.abort()
    }
}

afterEvaluate {
    tasks.all { t ->
        if (t.name.startsWith("connected") && t.name.endsWith("AndroidTest")) {
            t.dependsOn(startAdbForwarding)
            t.finalizedBy(stopAdbForwarding)
        }
    }
}

// Do not want any release candidates for updates.
dependencyUpdates {
    revision = "release"
    checkForGradleUpdate = false
    //noinspection DuplicatePlatformClasses
    outputFormatter = "json"

    // Android apparently marks their "alpha" as "release" so we have to reject them.
    resolutionStrategy {
        componentSelection { rules ->
            rules.all { ComponentSelection selection ->
                boolean rejected = [
                    'alpha',
                    'beta',
                    'rc',
                    'cr',
                    'm',
                    'preview'
                ].any { qualifier ->
                    selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
                }
                if (rejected) {
                    selection.reject('Release candidate')
                }
            }
        }
    }
}

// Dependencies must be below the android block to allow productFlavor specific deps.
dependencies {
    implementation 'org.connectbot:sshlib:2.2.19'
    googleImplementation 'com.google.android.gms:play-services-basement:17.6.0'
    ossImplementation 'org.conscrypt:conscrypt-android:2.5.1'

    implementation "androidx.recyclerview:recyclerview:$supportLibraryVersion"
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation "androidx.preference:preference:1.1.1"
    implementation "com.google.android.material:material:1.3.0"

    androidTestUtil "androidx.test:orchestrator:$testRunnerVersion"
    androidTestUtil "com.linkedin.testbutler:test-butler-app:2.2.1"
    androidTestImplementation "androidx.test:core:1.3.0"
    androidTestImplementation "androidx.test:rules:$testRunnerVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espressoVersion"
    androidTestImplementation "androidx.test.espresso:espresso-intents:$espressoVersion"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:$espressoVersion"
    androidTestImplementation "androidx.test.ext:junit:$supportLibraryVersion"
    androidTestImplementation "com.linkedin.testbutler:test-butler-library:2.2.1"

    testImplementation 'junit:junit:4.13.2'
    testImplementation "androidx.test:core:1.3.0"
    testImplementation "androidx.test.ext:junit:1.1.2"
    testImplementation 'org.mockito:mockito-core:3.8.0'
    testImplementation 'org.assertj:assertj-core:3.19.0'
    testImplementation 'org.robolectric:robolectric:4.5.1'

    errorprone "com.google.errorprone:error_prone_core:2.5.1"
    errorproneJavac "com.google.errorprone:javac:9+181-r4173-1"
}

